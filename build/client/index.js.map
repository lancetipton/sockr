{"version":3,"file":"index.js","sources":["../../src/client/context/context.js","../../src/client/hooks/useSockr.js","../../src/client/hocs/sockrHoc.js","../../src/client/reducer/sockrState.js","../../src/client/hooks/useSockrItems.js","../../src/constants/eventTypes.js","../../src/client/constants/index.js","../../src/client/actions/addPeer.js","../../src/client/actions/setId.js","../../src/client/actions/setCmds.js","../../src/client/actions/init.js","../../src/client/actions/connect.js","../../src/client/actions/toggleIsRunning.js","../../src/client/actions/cmdEnd.js","../../src/client/actions/cmdErr.js","../../src/client/actions/cmdFail.js","../../src/client/actions/cmdOut.js","../../src/client/actions/peerDisconnect.js","../../src/client/service/socketService.js","../../src/client/reducer/sockrReducer.js","../../src/client/reducer/joinReducers.js","../../src/client/reducer/useSockrReducer.js","../../src/client/context/SockrProvider.js"],"sourcesContent":["import React from 'react'\n\n/**\n * Creates the initial theme context\n */\nexport const SocketContext = React.createContext(null)\n","import { SocketContext } from '../context/context'\nimport { useContext } from 'react'\n\n/**\n * Helper hook to get the websocket content\n * @function\n * @public\n * @export\n *\n * @returns {Object} websocket context object\n */\nexport const useSockr = () => {\n  return useContext(SocketContext)\n}\n","import { useSockr } from '../hooks/useSockr'\nimport React from 'react'\n\n/**\n * Websocket HOC component\n * @function\n * @public\n * @export\n * @param {Object} props\n *\n */\nexport const SockrHoc = Component => {\n  const websocket = useSockr()\n  return props => <Component {...props} websocket={websocket} />\n}\n","/**\n * Cache holder for the sockr sate object\n * Should be update every time the sockr reducer state is changed\n * @type Object\n * @private\n *\n */\nlet _SOCKR_STATE\n\n/**\n * Cache holder for the sockr dispatch method\n * @function\n * @private\n *\n * @returns {void}\n */\nlet _SOCKR_DISPATCH = () =>\n  console.warn(`Sockr Dispatch has not been initialized!`)\n\n/**\n * Helper to get the sockrDispatch method\n * @function\n * @public\n * @export\n *\n * @returns {function} Sockr dispatch method\n */\nexport const getState = () => _SOCKR_STATE\n\n/**\n * Helper to get the sockrDispatch method\n * @function\n * @public\n * @export\n *\n * @returns {function} Sockr dispatch method\n */\nexport const getDispatch = () => _SOCKR_DISPATCH\n\n/**\n * Sets the internally managed sockr state object\n * @function\n * @public\n * @export\n * @param {Object} next - The next state object\n *\n * @returns {void}\n */\nexport const setNextState = next => {\n  _SOCKR_STATE = next\n}\n\n/**\n * Sets the internally managed sockr dispatch function\n * @function\n * @public\n * @export\n * @param {function} dispatch - The store dispatch function\n *\n * @returns {void}\n */\nexport const setDispatch = dispatch => {\n  _SOCKR_DISPATCH = dispatch\n}\n\n/**\n * Helper matching the redux API to get the getState and getDispatch methods\n * @function\n * @public\n * @export\n * @param {function} dispatch - The store dispatch function\n *\n * @returns {void}\n */\nexport const getStore = () => {\n  return {\n    getState,\n    getDispatch,\n  }\n}\n","import { useMemo, useRef } from 'react'\nimport { getState } from '../reducer/sockrState'\nimport { get, noPropArr, clearObj, eitherArr } from '@keg-hub/jsutils'\n\n/**\n * Hook to extract a single values from the sockr state object\n * Memoizes the extracted values and returns them as an object\n * Only updates the values when the store property matching a key statePaths has updated\n * This avoids re-renders when the state object has change, but a value has not\n * @function\n * @public\n * @export\n * @returns {Array} statePaths - Paths to values on the current sockr state\n *\n * @returns {Object} Memoize values from the state\n */\nexport const useSockrItems = (findPaths = noPropArr) => {\n  // Ensure we have an array to call reduce on\n  const statePaths = eitherArr(findPaths, [findPaths])\n\n  // Get the current state to allow pulling the values with statePaths\n  const state = getState()\n\n  // Memoize the current values from the state at statePaths\n  // If the state updates, but not the values from statePaths,\n  // then this hook with run, but the returned values will be the same\n  // Or it will get the updated values when the state has changes\n  // Either way, the values should always be the correct values in the state\n  const values = useMemo(() => {\n    return statePaths.reduce((found, valPath) => {\n      found[valPath] = get(state, valPath)\n\n      return found\n    }, {})\n  }, [ state, statePaths ])\n\n  // Init the sockrRef to store the initial value\n  const sockrRef = useRef(values)\n\n  // Memoize the values and sockrRef.current\n  // Loop each property in values and\n  // Update sockrRef.current to the current state value\n  // Then return sockrRef.current\n  // This way the values are only ever updated it it's they changed on that state changed\n  // If the state object changes, but not the values, then the original values are returned\n  return useMemo(() => {\n    // Clear out all keys from the current ref\n    // This also keeps the same identity of the ref object\n    // Which means we should check the children for updates, not the root object\n    clearObj(sockrRef.current)\n\n    // Loop the values and add the current values to the ref\n    // This puts back any values we removed in the clearObj method call\n    // If the value never changed, then the ref should have the same value again\n    // But it removes any properties that should not longer exist\n    Object.entries(values).map(\n      ([ key, value ]) => (sockrRef.current[key] = value)\n    )\n\n    return sockrRef.current\n  }, [ values, sockrRef && sockrRef.current ])\n}\n","const TAG_PREFIX = 'SOCKr'\nconst authTokenHeader = `SOCKR-AUTH-TOKEN`\n\nconst EventTypes = {\n  // General\n  INIT: `${TAG_PREFIX}:INIT`,\n  SET_ID: `${TAG_PREFIX}:SET_ID`,\n  CONNECT: `${TAG_PREFIX}:CONNECT`,\n\n  // STORE\n  UPDATE_STORE: `${TAG_PREFIX}:UPDATE_STORE`,\n\n  // Auth\n  AUTH_TOKEN: `${TAG_PREFIX}:AUTH_TOKEN`,\n  NOT_AUTHORIZED: `${TAG_PREFIX}:NOT_AUTHORIZED`,\n\n  // Peer\n  ADD_PEER: `${TAG_PREFIX}:ADD_PEER`,\n  PEER_DISCONNECT: `${TAG_PREFIX}:PEER_DISCONNECT`,\n\n  // Command\n  SET_CMDS: `${TAG_PREFIX}:SET_CMDS`,\n  RUN_CMD: `${TAG_PREFIX}:RUN_CMD`,\n  CMD_RUNNING: `${TAG_PREFIX}:CMD_RUNNING`,\n  CMD_END: `${TAG_PREFIX}:CMD_END`,\n  CMD_OUT: `${TAG_PREFIX}:CMD_OUT`,\n  CMD_ERR: `${TAG_PREFIX}:CMD_ERR`,\n  CMD_FAIL: `${TAG_PREFIX}:CMD_FAIL`,\n}\n\nmodule.exports = {\n  EventTypes,\n  authTokenHeader,\n  tagPrefix: TAG_PREFIX,\n}\n","// This is a work-around due to rollup adding jsutils as a default export\n// We do the deepFreeze here instead of in the shared constants file\n// This works around module.exports vs exports issues\nimport { deepFreeze } from '@keg-hub/jsutils'\nimport {\n  EventTypes,\n  tagPrefix,\n  authTokenHeader,\n} from '../../constants/eventTypes'\nconst frozenEvents = deepFreeze(EventTypes)\n\nexport { tagPrefix, authTokenHeader, frozenEvents as EventTypes }\n","import { EventTypes } from '../constants'\nimport { getDispatch } from '../reducer/sockrState'\n\n/**\n * Dispatches a connected peers id\n * @param {Object} id - Id of the peer that has connected\n * @param {Array} peers - Currently connected peers\n *\n * @returns {void}\n */\nexport const addPeer = ({ id, peers }) => {\n  return getDispatch()({\n    type: EventTypes.ADD_PEER,\n    id,\n    peers,\n  })\n}\n","import { EventTypes } from '../constants'\nimport { getDispatch } from '../reducer/sockrState'\n\n/**\n * Dispatches that a peer has disconnected\n * @param {Object} id - Id of the connected socket\n * @param {Boolean} isRunning - Is the backend running a command\n * @param {Boolean} data - Extra metadata sent from the backend\n *\n * @returns {void}\n */\nexport const setId = ({ id, data, isRunning }) => {\n  getDispatch()({\n    type: EventTypes.SET_ID,\n    id,\n    isRunning,\n    ...data,\n  })\n}\n","import { EventTypes } from '../constants'\nimport { getDispatch } from '../reducer/sockrState'\n\n/**\n * Dispatches passed in commands to the reducers\n * @param {Object} data - Message data from the socket\n *\n * @returns {void}\n */\nexport const setCmds = ({ data: { commands } }) => {\n  return getDispatch()({\n    commands,\n    type: EventTypes.SET_CMDS,\n  })\n}\n","import { noOpObj } from '@keg-hub/jsutils'\nimport { setId } from './setId'\nimport { setCmds } from './setCmds'\n\n/**\n * Initializes the store when the web-socket is initialised\n * Makes call to store the allowed commands and sets the sockets id\n * @param {Object} data - Message data from the socket\n *\n * @returns {void}\n */\nexport const init = (data = noOpObj, service = noOpObj) => {\n  setCmds(data, service)\n  setId(data, service)\n}\n","import { EventTypes } from '../constants'\nimport { getDispatch } from '../reducer/sockrState'\n\n/**\n * Dispatches event that the web-socket has connected\n *\n * @returns {void}\n */\nexport const connect = () => {\n  return getDispatch()({\n    type: EventTypes.CONNECT,\n    connected: true,\n  })\n}\n","import { EventTypes } from '../constants'\nimport { getDispatch } from '../reducer/sockrState'\n\n/**\n * Toggles if the backend is running a command\n * @param {Boolean} isRunning - Is the backend running a command\n * @param {string} name - Name of the command being run\n *\n * @returns {void}\n */\nexport const toggleIsRunning = ({ isRunning, name }) => {\n  getDispatch()({\n    type: EventTypes.CMD_RUNNING,\n    isRunning,\n    name,\n  })\n}\n","import { EventTypes } from '../constants'\nimport { getDispatch } from '../reducer/sockrState'\nimport { toggleIsRunning } from './toggleIsRunning'\n\n/**\n * Dispatches when a command has finished running\n * Makes call to toggleIsRunning, to turn it off\n * @param {Object} data - Message data from the socket\n *\n * @returns {void}\n */\nexport const cmdEnd = data => {\n  return (\n    data &&\n    data.message &&\n    getDispatch()({\n      type: EventTypes.CMD_END,\n      ...data,\n    })\n  )\n\n  toggleIsRunning(data)\n}\n","import { EventTypes } from '../constants'\nimport { getDispatch } from '../reducer/sockrState'\n\n/**\n * Dispatches an error message that occurred on while a command was running\n * @param {Object} data - Message data from the socket\n *\n * @returns {void}\n */\nexport const cmdErr = data => {\n  data &&\n    data.message &&\n    getDispatch()({\n      type: EventTypes.CMD_ERR,\n      ...data,\n    })\n}\n","import { EventTypes } from '../constants'\nimport { getDispatch } from '../reducer/sockrState'\nimport { toggleIsRunning } from './toggleIsRunning'\n\n/**\n * Dispatches an error that occurred on while a command was running\n * Makes call to toggleIsRunning, to turn it off\n * @param {Object} data - Message data from the socket\n *\n * @returns {void}\n */\nexport const cmdFail = (data, service) => {\n  return (\n    data &&\n    data.message &&\n    getDispatch()({\n      type: EventTypes.CMD_FAIL,\n      ...data,\n    })\n  )\n\n  toggleIsRunning(data, service)\n}\n","import { EventTypes } from '../constants'\nimport { getDispatch } from '../reducer/sockrState'\n\n/**\n * Dispatches an output message that occurred on while a command was running\n * @param {Object} data - Message data from the socket\n *\n * @returns {void}\n */\nexport const cmdOut = data => {\n  data &&\n    data.message &&\n    getDispatch()({\n      type: EventTypes.CMD_OUT,\n      ...data,\n    })\n}\n","import { EventTypes } from '../constants'\nimport { getDispatch } from '../reducer/sockrState'\n\n/**\n * Dispatches that a peer has disconnected\n * @param {Object} id - Id of the peer that has disconnected\n * @param {Array} peers - Currently connected peers\n *\n * @returns {void}\n */\nexport const peerDisconnect = ({ id, peers }) => {\n  return getDispatch()({\n    type: EventTypes.DISCONNECT_PEER,\n    id,\n    peers,\n  })\n}\n","import io from 'socket.io-client'\nimport {\n  checkCall,\n  get,\n  isFunc,\n  noOpObj,\n  camelCase,\n  snakeCase,\n  isObj,\n} from '@keg-hub/jsutils'\nimport { EventTypes, tagPrefix, authTokenHeader } from '../constants'\nimport * as InternalActions from '../actions'\n\n/**\n * Builds the websocket endpoint to connect to the backend websocket\n * @function\n * @private\n *\n * @param {Object} config - Websocket client config object matching the config spec\n *\n * @returns {string} - Built websocket endpoint\n */\nconst buildEndpoint = config => {\n  if (config.endpoint) return config.endpoint\n\n  // Use the same http protocol as what the current window is using\n  const win = typeof window === 'undefined' ? {} : window\n  const protocol = get(win, 'location.protocol', 'https:')\n\n  const namespace = !config.namespace\n    ? ``\n    : config.namespace.startsWith(`/`)\n      ? config.namespace\n      : `/${config.namespace}`\n\n  return config.port\n    ? `${protocol}//${config.host}:${config.port}${namespace}`.trim()\n    : `${config.host}${namespace}`.trim()\n}\n\n/**\n * Calls the passed in actions with the received message and SocketService class instance\n * @function\n * @private\n *\n * @param {function} action - Method to be called relative to the event type\n * @param {Object} message - Data received from the websocket\n * @param {Object} instance - SocketService class instance\n * @param {string} event - Type of socket event receive\n *\n * @returns {*} Response from the action method\n */\nconst checkCallEvent = (action, message, instance, event) => {\n  return checkCall(action, message, instance, event)\n}\n\n/**\n * Calls internal and custom actions with the received message and SocketService class instance\n * @function\n * @private\n *\n * @param {Object} instance - SocketService class instance\n * @param {string} event - Type of socket event receive\n * @param {function} action - Method to be called relative to the event type\n * @param {Object} message - Data received from the websocket\n *\n * @returns {void}\n */\nconst callAction = (instance, event, action) => {\n  const eventName = camelCase((event.split(':')[1] || '').toLowerCase())\n\n  return data => {\n    if (!eventName) return instance.logData(`Invalid event name!`, event)\n\n    // Parse the data from string to object\n    const message = data && JSON.parse(data)\n\n    // Log the event for debugging\n    instance.logEvent(event, message)\n\n    // Look for the init event, and pull out the commands from it\n    // Init should only happen when we connect to the socket\n    eventName === 'init' && (instance.commands = get(message, 'data.commands'))\n\n    // Call the default internal action if it exists\n    const internal = InternalActions[eventName]\n    internal && checkCallEvent(internal, message, instance, event)\n\n    // Call the custom action if it exists\n    const customEvent = get(instance.config, `events.${eventName}`)\n    customEvent && checkCallEvent(customEvent, message, instance, event)\n\n    // Call the all action if it exists\n    // Is called for all sockr events that happen on the frontend\n    const allEvent = get(instance.config, `events.all`)\n    allEvent && checkCallEvent(allEvent, message, instance, event)\n  }\n}\n\n/**\n * Find the command from the commands ID\n * Searches through all loaded command, looking for a matching id\n * Otherwise returns false\n * @function\n * @private\n *\n * @param {Object} commands - All commands loaded from the back end\n * @param {Object|string} cmdOrId - Command object or id of the command\n *\n * @returns {Object|boolean} - The found command object or false\n */\nconst getCommand = (commands, cmdOrId) => {\n  const cmdId = isObj(cmdOrId) ? cmdOrId.id : cmdOrId\n\n  return Object.entries(commands).reduce((found, [ group, subCmds ]) => {\n    return found\n      ? found\n      : Object.entries(subCmds).reduce((subFound, [ name, definition ]) => {\n        return !subFound && isObj(definition) && definition.id === cmdId\n          ? definition\n          : subFound\n      }, false)\n  }, false)\n}\n\n/**\n * Service class for managing client websocket events\n * @function\n * @private\n *\n * @param {Object} config - Websocket client config object matching the config spec\n * @param {function} dispatch - Method to be called to update the websocket state\n * @param {string} token - Auth token for connecting to the websocket\n *\n * @returns {Object} - Instance of SocketService\n */\nexport class SocketService {\n  io = io\n\n  /**\n   * Helper to log data when logDebug is true\n   * @memberof SocketService\n   * @type function\n   * @public\n   * @param {*} data - Items to be logged\n   *\n   * @returns {void}\n   */\n  logData(...data) {\n    this.logDebug && console.log(...data)\n  }\n\n  /**\n   * Helper to log events when logDebug is true\n   * @memberof SocketService\n   * @type function\n   * @public\n   * @param {string} event - Websocket event to be logged\n   * @param {*} data - Items to be logged\n   *\n   * @returns {void}\n   */\n  logEvent(event, ...data) {\n    this.logDebug && console.log(`Socket Event: ${event}`, ...data)\n  }\n\n  /**\n   * Initializes the web-socket based on the passed in config\n   * Starts initial handshake to connect with the backend\n   * @memberof SocketService\n   * @type function\n   * @public\n   *\n   * @param {Object} config - Options for setting up the websocket\n   * @param {string} token - Auth token for validating with the backend\n   * @param {boolean} logDebug - Should log Socket events as the happen\n   *\n   * @returns {void}\n   */\n  initSocket(config, token, logDebug = false) {\n    // If the sockets already setup, just return\n    if (this.socket) return\n\n    this.config = config\n    this.logDebug = logDebug\n\n    const endpoint = buildEndpoint(config)\n\n    this.logData(`Connecting to backend socket => ${endpoint}${config.path}`)\n\n    const ioConfig = config.ioConfig || { extraHeaders: {} }\n\n    // Setup the socket, and connect to the server\n    this.socket = io(endpoint, {\n      path: config.path,\n      transports: [ 'websocket', 'polling', 'flashsocket' ],\n      ...ioConfig,\n      extraHeaders: {\n        ...(ioConfig.extraHeaders || {}),\n        ...(token ? { [authTokenHeader]: token } : {}),\n      },\n    })\n\n    this.addEvents()\n\n    return this\n  }\n\n  /**\n   * Initializes the web-socket based on the passed in config\n   * Starts initial handshake to connect with the backend\n   * @memberof SocketService\n   * @type Object\n   * @public\n   *\n   * @param {Object} config - Options for setting up the websocket\n   * @param {string} token - Auth token for validating with the backend\n   * @param {boolean} logDebug - Should log Socket events as the happen\n   *\n   * @returns {void}\n   */\n  addEvents() {\n    if (!this.socket) return\n\n    // Map the custom config.events with valid actions\n    // To listeners on the websocket\n    // Skip if an event type matching an internal event\n    // Custom event types with the same name as internal event\n    // Get called within the callAction of the registered internal event\n    Object.entries(get(this.config, 'events', noOpObj)).map(\n      ([ name, action ]) => {\n        const namCaps = snakeCase(name).toUpperCase()\n        if (namCaps === 'ALL') return\n\n        const eventType = `${tagPrefix}:${namCaps}`\n\n        isFunc(action) &&\n          !EventTypes[namCaps] &&\n          this.socket.on(eventType, callAction(this, eventType))\n      }\n    )\n\n    // Socket Map Event types to internal actions\n    Object.entries(EventTypes).map(([ key, eventType ]) => {\n      this.socket.on(eventType, callAction(this, eventType))\n    })\n\n    // Initial connection to the server through the socket\n    // Call the onConnection method which will handel authorization\n    this.socket.on(`connect`, this.onConnection.bind(this))\n  }\n\n  /**\n   * Callback method called when the websocket connects to the backend\n   * @memberof SocketService\n   * @type function\n   * @public\n   * @param {string} token - Auth token for validating with the backend\n   * @param {Object} data - Content sent from the backend\n   *\n   * @returns {void}\n   */\n  onConnection(token, data) {\n    // TODO: Implement token auth\n    // Send the token to the server to be validated\n    // this.emit(EventTypes.AUTH_TOKEN, { token: token })\n    // Then call the `callAction` with the connected event args\n    const connectAction = callAction(this, `${tagPrefix}:CONNECT`)\n    connectAction(data)\n  }\n\n  /**\n   * Sends an event to the connected backend through websocket ( Like an REST API call )\n   * @memberof SocketService\n   * @type function\n   * @public\n   * @param {string} event - Name of the event to emit ( Sent to the backend )\n   * @param {Object} data - Content sent to the backend\n   *\n   * @returns {void}\n   */\n  emit = (event, data) => {\n    if (!this.socket)\n      return console.error(`Socket not connected, cannot emit socket event!`)\n\n    if (!event)\n      return console.error(\n        `Event type is missing, cannot emit socket event without an event type!`,\n        event\n      )\n\n    this.logData(`Sending Socket Event: ${event}`, data)\n\n    // Send a message to the server\n    this.socket.emit(event, data)\n  }\n\n  /**\n   * Builds the command to be run, and sends it to the backend\n   * @memberof SocketService\n   * @type function\n   * @public\n   * @param {Object|string} command - Command data used to build the command for the backend\n   *                                  Or the id of the command to be run\n   *\n   * @returns {void}\n   */\n  runCommand(command, params) {\n    const { id, cmd, name, group } = getCommand(this.commands, command)\n    return this.emit(EventTypes.RUN_CMD, {\n      id,\n      cmd,\n      name,\n      group,\n      params,\n    })\n  }\n\n  /**\n   * Disconnects from the backend websocket\n   * Cleans up any open object || handles\n   * @memberof SocketService\n   * @type function\n   * @public\n   *\n   * @returns {void}\n   */\n  disconnect = () => {\n    if (!this.socket) return this.logData(`Socket already disconnected!`)\n\n    this.logData(`Disconnecting from Socket!`)\n    this.socket.disconnect()\n    this.socket = undefined\n    this.config = undefined\n    this.dispatch = undefined\n  }\n}\n\nexport const WSService = new SocketService()\n","import { EventTypes } from '../constants'\nimport { noOpObj } from '@keg-hub/jsutils'\n\n/**\n * Initial state of the sockr reducer\n * @type Object\n */\nconst initialState = {\n  connected: false,\n  peers: [],\n  id: null,\n  runningCmd: null,\n  isRunning: false,\n  server: noOpObj,\n  events: noOpObj,\n}\n\n/**\n * Default reducer for sockr\n * @type function\n * @public\n * @export\n * @param {Object} [state=initialState] - Initial state of the reducer\n * @param {Object} action - Properties define how to update the current reducer state\n *\n * @returns {Object} Reducers state with the actions updates applied\n */\nexport const sockrReducer = (state = initialState, action) => {\n  if (!state || !action || !action.type) return state\n\n  switch (action.type) {\n  case EventTypes.CONNECT: {\n    return action.connected === state.connected\n      ? state\n      : {\n          ...state,\n          connected: true,\n        }\n  }\n\n  case EventTypes.SET_ID: {\n    const { type, ...updates } = action\n    return !action.id\n      ? state\n      : {\n          ...state,\n          ...updates,\n        }\n  }\n\n  case EventTypes.CMD_RUNNING: {\n    return action.isRunning === state.isRunning\n      ? state\n      : {\n          ...state,\n          runningCmd: (action.isRunning && action.name) || null,\n          isRunning: action.isRunning,\n        }\n  }\n\n  case EventTypes.ADD_PEER: {\n    return !action.peers\n      ? state\n      : {\n          ...state,\n          peers: action.peers,\n        }\n  }\n\n  case EventTypes.DISCONNECT_PEER: {\n    return !action.peers\n      ? state\n      : {\n          ...state,\n          peers: action.peers,\n        }\n  }\n\n  default: {\n    return state\n  }\n  }\n}\n","import { isFunc } from '@keg-hub/jsutils'\n\n/**\n * Cache holder for the joined reducers function\n * @type function\n * @private\n */\nlet _JOINED_REDUCERS\n\n/**\n * Joins the custom reducer method with the default sockr reducer\n * @function\n * @public\n * @export\n * @param {function} sockrReducer - Default sockr reducer\n * @param {function} customReducer - Custom reducer passed in by the sockr consumer\n *\n * @returns {function} Single reducer function\n */\nexport const joinReducers = (sockrReducer, customReducer) => {\n  // If the joined reducers are already set, just return them\n  if (_JOINED_REDUCERS) return _JOINED_REDUCERS\n\n  // Set the join reducer function, then return it\n  _JOINED_REDUCERS = (state, action) => {\n    // First update the internal reducer\n    const updatedState = sockrReducer(state, action)\n\n    // Then check if we should call the customReducer\n    return isFunc(customReducer)\n      ? customReducer(updatedState, action)\n      : updatedState\n  }\n\n  return _JOINED_REDUCERS\n}\n","import { useReducer } from 'react'\nimport { sockrReducer } from './sockrReducer'\nimport { joinReducers } from './joinReducers'\nimport { deepMerge } from '@keg-hub/jsutils'\nimport { getDispatch, getState, setNextState, setDispatch } from './sockrState'\n\n/**\n * Call the sockr reducer to get the initial state\n * @object\n */\nconst initialState = sockrReducer()\n\n// Set the initial sate to the sockrState object\nsetNextState(initialState)\n\n/**\n * Hook to setup the sockr reducer and initialize the sockr state\n * Also joins the custom reducer and state with the defaults\n * @function\n * @public\n * @export\n * @param {function} customReducer - Custom reducer passed in by the sockr consumer\n * @param {Object} customInitialState - Custom initial state to override the defaults\n *\n * @returns {function} Single reducer function\n */\nexport const useSockrReducer = (customReducer, customInitialState) => {\n  // Join the reducers if a custom reducer is passed in\n  // And build the reducers with the joined default state and custom state\n  const [ state, dispatch ] = useReducer(\n    joinReducers(sockrReducer, customReducer),\n    deepMerge(initialState, customInitialState)\n  )\n\n  // Update the internal state so we can keep track of it\n  getState() !== state && setNextState(state)\n\n  // Technically the dispatch method should never change, so no need to memoize\n  getDispatch() !== dispatch && setDispatch(dispatch)\n\n  return state\n}\n","import { WSService } from '../service'\nimport { SocketContext } from './context'\nimport { noOpObj } from '@keg-hub/jsutils'\nimport React, { useEffect } from 'react'\nimport { useSockrReducer } from '../reducer/useSockrReducer'\n\nconst isDev = process.env.NODE_ENV === 'development'\n\n/**\n * Component to memoize the children of the context provider\n * @function\n * @private\n * @param {Object} props\n * @param {function} props.children - Children components passed to the Provider\n *\n */\n// eslint-disable-next-line no-unused-vars\nconst MemoChildren = React.memo(props => <>{props.children}</>)\n\n/**\n * Websocket Provider component. Should wrap a react application as a Provider\n * @function\n * @public\n * @export\n * @param {Object} props\n * @param {function} props.reducer - Custom websocket reducer function\n * @param {Object} props.initialState - Custom initial state for the reducer\n *\n * @returns {Object} sockr model object\n */\nexport const SockrProvider = props => {\n  const { children, config, reducer, token, debug } = props\n\n  const websocket = useSockrReducer(reducer, config || noOpObj)\n\n  // Only init the websocket on initial render\n  // Don't update the websocket after that\n  // All config values must be setup from the start\n  useEffect(() => {\n    WSService &&\n      !WSService.socket &&\n      WSService.initSocket(websocket, token, debug)\n\n    return () => !isDev && WSService.disconnect()\n  }, [])\n\n  return (\n    <SocketContext.Provider value={websocket}>\n      <MemoChildren>{children}</MemoChildren>\n    </SocketContext.Provider>\n  )\n}\n"],"names":["SocketContext","React","createContext","useSockr","useContext","SockrHoc","Component","websocket","props","_SOCKR_STATE","_SOCKR_DISPATCH","console","warn","getState","getDispatch","setNextState","next","setDispatch","dispatch","useSockrItems","findPaths","noPropArr","statePaths","eitherArr","state","values","useMemo","reduce","found","valPath","get","sockrRef","useRef","clearObj","current","Object","entries","map","key","value","TAG_PREFIX","authTokenHeader","EventTypes","INIT","SET_ID","CONNECT","UPDATE_STORE","AUTH_TOKEN","NOT_AUTHORIZED","ADD_PEER","PEER_DISCONNECT","SET_CMDS","RUN_CMD","CMD_RUNNING","CMD_END","CMD_OUT","CMD_ERR","CMD_FAIL","module","tagPrefix","frozenEvents","deepFreeze","addPeer","id","peers","type","setId","data","isRunning","setCmds","commands","init","noOpObj","service","connect","connected","toggleIsRunning","name","cmdEnd","message","cmdErr","cmdFail","cmdOut","peerDisconnect","DISCONNECT_PEER","buildEndpoint","config","endpoint","win","window","protocol","namespace","startsWith","port","host","trim","checkCallEvent","action","instance","event","checkCall","callAction","eventName","camelCase","split","toLowerCase","logData","JSON","parse","logEvent","internal","InternalActions","customEvent","allEvent","getCommand","cmdOrId","cmdId","isObj","group","subCmds","subFound","definition","SocketService","io","socket","error","emit","disconnect","undefined","logDebug","log","initSocket","token","path","ioConfig","extraHeaders","transports","addEvents","namCaps","snakeCase","toUpperCase","eventType","isFunc","on","onConnection","bind","connectAction","runCommand","command","params","cmd","WSService","initialState","runningCmd","server","events","sockrReducer","updates","_JOINED_REDUCERS","joinReducers","customReducer","updatedState","useSockrReducer","customInitialState","useReducer","deepMerge","isDev","process","env","NODE_ENV","MemoChildren","memo","children","SockrProvider","reducer","debug","useEffect"],"mappings":"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"}